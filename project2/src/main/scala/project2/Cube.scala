package project2

import java.util

import scala.collection.mutable.Queue
import scala.collection.mutable.ArrayBuffer
import scala.collection.mutable.ListBuffer
import scala.collection.mutable.LinkedList
import java.util.Scanner

/**
 * Created by chelsea on 9/17/15.
 */

/**
 * Cube creator
 */
class Cube {
  var NODES: Int = 0
  var EDGES: Int = 144

  var cubeList = Array.ofDim[Int](EDGES,2)
  var neighborList = Array.ofDim[Int](6)

  var node1: Int = 0
  var node2: Int = 0

  /**
   * Create the links between nodes based on the input generated by generateCubeGraph() method
   */
  def getRandomCubeNeighbor(input: String, idx: Int): Int = {
    var scan: Scanner = new Scanner(input)
    NODES = scan.nextInt()
    EDGES = scan.nextInt()
    println("Nodes: " + NODES + "    Edges: " + EDGES)

    for (i <- 0 to EDGES-1) {
      node1 = scan.nextInt()
      node2 = scan.nextInt()

      cubeList(i)(0) = node1
      cubeList(i)(1) = node2
    }

    var counter = 0
    for (i <- 0 to EDGES-1) {
      //println(cubeList(i)(0) + ", " + cubeList(i)(1))
      if (cubeList(i)(0) == idx) {
        if (checkDuplicates(cubeList(i)(1)) == false) {
          neighborList(counter) = cubeList(i)(1)
          counter = counter + 1
        }
      }
      if (cubeList(i)(1) == idx) {
        if (checkDuplicates(cubeList(i)(0)) == false) {
          neighborList(counter) = cubeList(i)(0)
          counter = counter + 1
        }
      }
    }

    for (i <- 0 to neighborList.size-1) {
      println(neighborList(i))
    }

    2
  }

  def checkDuplicates(num: Int): Boolean = {
    var duplicate = false
    for (i <- 0 to neighborList.size-1) {
      if (num == neighborList(i)) {
        duplicate = true
      }
    }
    duplicate
  }


  /**
   * Input generator for a cube
   */
  def generateCubeGraph(n: Int): String = {
    var SIDE = n   // Number of nodes in one side of the cube
    var links = ""  // Holds the final output
    var link = 0    // Counts the number of links

    for (row <- 0 to SIDE) {
      for (col <- 0 to SIDE) {
        for (depth <- 0 to SIDE) {
          var current = depth + (col * SIDE) + (row * SIDE * SIDE)

          // If not last depth
          if(depth != SIDE-1) {
            links += "%d %d\n".format(current, current+1)
            link = link + 1
          }

          // If not last col
          if(col != SIDE-1) {
            links += "%d %d\n".format(current, current+SIDE)
            link = link + 1
          }

          // If not last row
          if(row != SIDE-1) {
            links += "%d %d\n".format(current, current+(SIDE*SIDE))
            link = link + 1
          }
        }
      }
    }
    // return #Nodes, #Edges, links ...
    "%d %d\n%s".format(SIDE*SIDE*SIDE, link, links)
  }
}